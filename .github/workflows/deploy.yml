name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Cache Docker layers
        uses: actions/cache@master
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

  build-client-dev:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Check out the source code
        uses: actions/checkout@master

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Login to DockerHub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push client dev docker image
        uses: docker/build-push-action@master
        with:
          context: ./client
          file: ./client/Dockerfile.dev
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/docker-multi-client:dev
            ${{ secrets.DOCKERHUB_USERNAME }}/docker-multi-client:${{ github.sha }}
          push: true

  test-client-dev:
    runs-on: ubuntu-latest
    needs: build-client-dev
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Login to DockerHub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Test the dev docker image
        run: docker run -e CI=true ${{ secrets.DOCKERHUB_USERNAME }}/docker-multi-client:dev npm run test a

  build-release:
    runs-on: ubuntu-latest
    needs: test-client-dev
    steps:
      - name: Check out the source code
        uses: actions/checkout@master

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Login to DockerHub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push client release docker image
        uses: docker/build-push-action@master
        with:
          context: ./client
          file: ./client/Dockerfile
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/docker-multi-client:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/docker-multi-client:${{ github.sha }}
          push: true

      - name: Build and push server release docker image
        uses: docker/build-push-action@master
        with:
          context: ./server
          file: ./server/Dockerfile
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/docker-multi-server:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/docker-multi-server:${{ github.sha }}
          push: true

      - name: Build and push worker release docker image
        uses: docker/build-push-action@master
        with:
          context: ./worker
          file: ./worker/Dockerfile
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/docker-multi-worker:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/docker-multi-worker:${{ github.sha }}
          push: true

  deploy:
    name: Deploy to AWS EKS
    runs-on: ubuntu-latest
    needs: build-release
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Make kubectl config file
      run: 'cat $HOME/.kube/config | base64 > ./a'

    - name: deploy to cluster
      uses: kodermax/kubectl-aws-eks@master
      env:
        KUBE_CONFIG_DATA: ./a
        IMAGE_TAG: ${{ github.sha }}
      with:
        args: set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Verify Deployment
      uses: kodermax/kubectl-aws-eks@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: rollout status deployment/my-app


#<--eksctl create cluster -f cluster.yml

